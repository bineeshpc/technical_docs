* python experiment
#+BEGIN_SRC python :results output :session :tangle yes :tangle /tmp/abc.py
from threading import Thread
import os
import time

def get_last_line(filename):
    os.system('tail -1 {}'.format(filename))
    print 'exiting'

def write_lines(f):
    print 'writing'
    for i in range(10**1):
        f.write('{}\n'.format(i))
    f.flush()
    os.fsync(f.fileno())



filename = '/tmp/abc.txt'
f = open(filename, 'w')
f.write('bini\n')

tw = Thread(target=write_lines, args=(f,), name='tw')
tw.start()
print tw.name
time.sleep(.1)

threads = [Thread(target=get_last_line, args=(filename, ), name='Thread %s' % i) for i in range(10)]


for t in threads:
    print t.name
    t.start()

tw.join()
for t in threads:    
    t.join()
    





f.close()
#os.unlink(filename)
#+END_SRC

#+RESULTS:
#+begin_example

>>> >>> >>> ... ... ... >>> ... ... ... ... ... ... >>> >>> >>> >>> >>> >>> >>> >>> >>> writing
tw
>>> >>> >>> >>> >>> ... ... ... ... Thread 0
bini
exiting
Thread 1
bini
exiting
Thread 2
bini
exiting
Thread 3
bini
exiting
Thread 4
bini
exiting
Thread 5
bini
exiting
Thread 6
bini
exiting
Thread 7
bini
exiting
Thread 8
bini
exiting
Thread 9
>>> ... ... ... bini
exiting
#+end_example

#+BEGIN_SRC sh :results output
2>&1 python /tmp/abc.py
#+END_SRC

#+RESULTS:
#+begin_example
9
9
9
9
9
9
9
9
9
9
tw
writing
Thread 0
Thread 1
Thread 2
Thread 3
exiting
Thread 4
exiting
Thread 5
exiting
Thread 6
exiting
Thread 7
exiting
Thread 8
exiting
Thread 9
exiting
exiting
exiting
exiting
#+end_example

* Parent process hanging in multiprocessing if children terminate unexpectedly
#+BEGIN_SRC python :results output :tangle yes :tangle /tmp/mult_hang.py
import multiprocessing
import sys
def foo(x):
  sys.exit(1)
multiprocessing.Pool(1).apply(foo, [1])


#+END_SRC

#+BEGIN_SRC sh :results output

python /tmp/mult_hang.py

#+END_SRC

#+RESULTS:

* Libraries
The purpose is to get familiarized with all standard libraries.
What is already known to me.
What options are available etc.
** Text wrap
https://docs.python.org/3/library/textwrap.html

I was asked to evaluate this but this did not work.
(setq py-python-command "/usr/bin/python3")

#+BEGIN_SRC python :results output
import textwrap
x = "hello\nworld"
y = x # textwrap.indent(x, '    ')
print y

z = textwrap.dedent(y)
print z
print textwrap.wrap(x, 3)
#+END_SRC

#+RESULTS:

** Subprocess

#+BEGIN_SRC python :results output :tangle yes :tangle /tmp/source_code134.py
from subprocess import Popen, PIPE
import subprocess

p1 = Popen(["seq", "1", "100"], stdout=PIPE)
p2 = Popen(["awk", "{print $NF}"], stdin=p1.stdout, stdout=PIPE)
p1.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.
p3 = Popen(["head", "-5"], stdin = p2.stdout, stdout=PIPE)
p2.stdout.close()
output = p3.communicate()[0]
print output
#+END_SRC 

#+RESULTS:
: 1
: 2
: 3
: 4
: 5
: 

 
* __all__
only import the things that are present in the list __all__
other things should be imported manually
it is upto the programmer to keep __all__ uptodate

* property
#+BEGIN_SRC python :results output :tangle yes :tangle /tmp/src112d.py
class A(object):
    def __init__(self, a, b):
        self._a = a
        self._b = b

    @property
    def a(self):
        print 'in getter', self._a
        if self._a < 0:
            return 0
        else:
            return self._a


    @a.setter
    def a(self, x):
        print 'in setter', x
        if x < -200:
            self._a = abs(x)
        else:
            self._a = x

    def get_b(self):
        print 'in getter', self._b
        if self._b < 0:
            return 0
        else:
            return self._b

    def set_b(self, x):
        print 'in setter', x
        if x < -200:
            self._b = abs(x)
        else:
            self._b = x

    b = property(get_b, set_b)
    print b.getter, get_b, dir(b)
    print b.setter, set_b
    # print help(property)


ao = A(-11, -2)
print dir(ao)

print ao.a
ao.a = -800
print dir(ao)
print ao.a
# print ao._A__b
print ao.a

print '*' * 20

print ao.b
ao.b = -900
print ao.b
#+END_SRC

#+RESULTS:
#+begin_example
<built-in method getter of property object at 0x7f168d0ec578> <function get_b at 0x7f168d0fe0c8> ['__class__', '__delattr__', '__delete__', '__doc__', '__format__', '__get__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__set__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'deleter', 'fdel', 'fget', 'fset', 'getter', 'setter']
<built-in method setter of property object at 0x7f168d0ec578> <function set_b at 0x7f168d0fe140>
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_a', '_b', 'a', 'b', 'get_b', 'set_b']
in getter -11
0
in setter -800
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_a', '_b', 'a', 'b', 'get_b', 'set_b']
in getter 800
800
in getter 800
800
********************
in getter -2
0
in setter -900
in getter 900
900
#+end_example

#+BEGIN_SRC sh :results output
python /tmp/src112d.py
#+END_SRC

#+RESULTS:
: ['__doc__', '__init__', '__module__', '_a', '_b', 'a', 'b', 'get_b', 'set_b']
: in getter -11
: 0
: ['__doc__', '__init__', '__module__', '_a', '_b', 'a', 'b', 'get_b', 'set_b']
: -800
: -800
: in getter -2
: 0
: -2

* Covert function of 2 args to 1 args
#+BEGIN_SRC python :results output
import functools

base2string = '1000'
print int(base2string, base=2)

base2string_to_int = functools.partial(int, base=2)

print base2string_to_int(base2string)

def simple(base2string, base=2):
    return int(base2string, base=2)

print simple(base2string)

print '*' * 10
for i in range(2, 10+1):
    f = functools.partial(int, base=i)
    print f(base2string)


#+END_SRC

#+RESULTS:
#+begin_example
8
8
8
**********
8
27
64
125
216
343
512
729
1000
#+end_example

* All libraries

The Python Standard Library

While The Python Language Reference describes the exact syntax and semantics of the Python language, this library reference manual describes the standard library that is distributed with Python. It also describes some of the optional components that are commonly included in Python distributions.

Python’s standard library is very extensive, offering a wide range of facilities as indicated by the long table of contents listed below. The library contains built-in modules (written in C) that provide access to system functionality such as file I/O that would otherwise be inaccessible to Python programmers, as well as modules written in Python that provide standardized solutions for many problems that occur in everyday programming. Some of these modules are explicitly designed to encourage and enhance the portability of Python programs by abstracting away platform-specifics into platform-neutral APIs.

The Python installers for the Windows platform usually include the entire standard library and often also include many additional components. For Unix-like operating systems Python is normally provided as a collection of packages, so it may be necessary to use the packaging tools provided with the operating system to obtain some or all of the optional components.

In addition to the standard library, there is a growing collection of several thousand components (from individual programs and modules to packages and entire application development frameworks), available from the Python Package Index.

    1. Introduction
    2. Built-in Functions
    3. Built-in Constants
        3.1. Constants added by the site module
    4. Built-in Types
        4.1. Truth Value Testing
        4.2. Boolean Operations — and, or, not
        4.3. Comparisons
        4.4. Numeric Types — int, float, complex
        4.5. Iterator Types
        4.6. Sequence Types — list, tuple, range
        4.7. Text Sequence Type — str
        4.8. Binary Sequence Types — bytes, bytearray, memoryview
        4.9. Set Types — set, frozenset
        4.10. Mapping Types — dict
        4.11. Context Manager Types
        4.12. Other Built-in Types
        4.13. Special Attributes
    5. Built-in Exceptions
        5.1. Base classes
        5.2. Concrete exceptions
        5.3. Warnings
        5.4. Exception hierarchy
    6. Text Processing Services
        6.1. string — Common string operations
        6.2. re — Regular expression operations
        6.3. difflib — Helpers for computing deltas
        6.4. textwrap — Text wrapping and filling
        6.5. unicodedata — Unicode Database
        6.6. stringprep — Internet String Preparation
        6.7. readline — GNU readline interface
        6.8. rlcompleter — Completion function for GNU readline
    7. Binary Data Services
        7.1. struct — Interpret bytes as packed binary data
        7.2. codecs — Codec registry and base classes
    8. Data Types
        8.1. datetime — Basic date and time types
        8.2. calendar — General calendar-related functions
        8.3. collections — Container datatypes
        8.4. collections.abc — Abstract Base Classes for Containers
        8.5. heapq — Heap queue algorithm
        8.6. bisect — Array bisection algorithm
        8.7. array — Efficient arrays of numeric values
        8.8. weakref — Weak references
        8.9. types — Dynamic type creation and names for built-in types
        8.10. copy — Shallow and deep copy operations
        8.11. pprint — Data pretty printer
        8.12. reprlib — Alternate repr() implementation
        8.13. enum — Support for enumerations
    9. Numeric and Mathematical Modules
        9.1. numbers — Numeric abstract base classes
        9.2. math — Mathematical functions
        9.3. cmath — Mathematical functions for complex numbers
        9.4. decimal — Decimal fixed point and floating point arithmetic
        9.5. fractions — Rational numbers
        9.6. random — Generate pseudo-random numbers
        9.7. statistics — Mathematical statistics functions
    10. Functional Programming Modules
        10.1. itertools — Functions creating iterators for efficient looping
        10.2. functools — Higher-order functions and operations on callable objects
        10.3. operator — Standard operators as functions
    11. File and Directory Access
        11.1. pathlib — Object-oriented filesystem paths
        11.2. os.path — Common pathname manipulations
        11.3. fileinput — Iterate over lines from multiple input streams
        11.4. stat — Interpreting stat() results
        11.5. filecmp — File and Directory Comparisons
        11.6. tempfile — Generate temporary files and directories
        11.7. glob — Unix style pathname pattern expansion
        11.8. fnmatch — Unix filename pattern matching
        11.9. linecache — Random access to text lines
        11.10. shutil — High-level file operations
        11.11. macpath — Mac OS 9 path manipulation functions
    12. Data Persistence
        12.1. pickle — Python object serialization
        12.2. copyreg — Register pickle support functions
        12.3. shelve — Python object persistence
        12.4. marshal — Internal Python object serialization
        12.5. dbm — Interfaces to Unix “databases”
        12.6. sqlite3 — DB-API 2.0 interface for SQLite databases
    13. Data Compression and Archiving
        13.1. zlib — Compression compatible with gzip
        13.2. gzip — Support for gzip files
        13.3. bz2 — Support for bzip2 compression
        13.4. lzma — Compression using the LZMA algorithm
        13.5. zipfile — Work with ZIP archives
        13.6. tarfile — Read and write tar archive files
    14. File Formats
        14.1. csv — CSV File Reading and Writing
        14.2. configparser — Configuration file parser
        14.3. netrc — netrc file processing
        14.4. xdrlib — Encode and decode XDR data
        14.5. plistlib — Generate and parse Mac OS X .plist files
    15. Cryptographic Services
        15.1. hashlib — Secure hashes and message digests
        15.2. hmac — Keyed-Hashing for Message Authentication
        15.3. secrets — Generate secure random numbers for managing secrets
    16. Generic Operating System Services
        16.1. os — Miscellaneous operating system interfaces
        16.2. io — Core tools for working with streams
        16.3. time — Time access and conversions
        16.4. argparse — Parser for command-line options, arguments and sub-commands
        16.5. getopt — C-style parser for command line options
        16.6. logging — Logging facility for Python
        16.7. logging.config — Logging configuration
        16.8. logging.handlers — Logging handlers
        16.9. getpass — Portable password input
        16.10. curses — Terminal handling for character-cell displays
        16.11. curses.textpad — Text input widget for curses programs
        16.12. curses.ascii — Utilities for ASCII characters
        16.13. curses.panel — A panel stack extension for curses
        16.14. platform — Access to underlying platform’s identifying data
        16.15. errno — Standard errno system symbols
        16.16. ctypes — A foreign function library for Python
    17. Concurrent Execution
        17.1. threading — Thread-based parallelism
        17.2. multiprocessing — Process-based parallelism
        17.3. The concurrent package
        17.4. concurrent.futures — Launching parallel tasks
        17.5. subprocess — Subprocess management
        17.6. sched — Event scheduler
        17.7. queue — A synchronized queue class
        17.8. dummy_threading — Drop-in replacement for the threading module
        17.9. _thread — Low-level threading API
        17.10. _dummy_thread — Drop-in replacement for the _thread module
    18. Interprocess Communication and Networking
        18.1. socket — Low-level networking interface
        18.2. ssl — TLS/SSL wrapper for socket objects
        18.3. select — Waiting for I/O completion
        18.4. selectors — High-level I/O multiplexing
        18.5. asyncio — Asynchronous I/O, event loop, coroutines and tasks
        18.6. asyncore — Asynchronous socket handler
        18.7. asynchat — Asynchronous socket command/response handler
        18.8. signal — Set handlers for asynchronous events
        18.9. mmap — Memory-mapped file support
    19. Internet Data Handling
        19.1. email — An email and MIME handling package
        19.2. json — JSON encoder and decoder
        19.3. mailcap — Mailcap file handling
        19.4. mailbox — Manipulate mailboxes in various formats
        19.5. mimetypes — Map filenames to MIME types
        19.6. base64 — Base16, Base32, Base64, Base85 Data Encodings
        19.7. binhex — Encode and decode binhex4 files
        19.8. binascii — Convert between binary and ASCII
        19.9. quopri — Encode and decode MIME quoted-printable data
        19.10. uu — Encode and decode uuencode files
    20. Structured Markup Processing Tools
        20.1. html — HyperText Markup Language support
        20.2. html.parser — Simple HTML and XHTML parser
        20.3. html.entities — Definitions of HTML general entities
        20.4. XML Processing Modules
        20.5. xml.etree.ElementTree — The ElementTree XML API
        20.6. xml.dom — The Document Object Model API
        20.7. xml.dom.minidom — Minimal DOM implementation
        20.8. xml.dom.pulldom — Support for building partial DOM trees
        20.9. xml.sax — Support for SAX2 parsers
        20.10. xml.sax.handler — Base classes for SAX handlers
        20.11. xml.sax.saxutils — SAX Utilities
        20.12. xml.sax.xmlreader — Interface for XML parsers
        20.13. xml.parsers.expat — Fast XML parsing using Expat
    21. Internet Protocols and Support
        21.1. webbrowser — Convenient Web-browser controller
        21.2. cgi — Common Gateway Interface support
        21.3. cgitb — Traceback manager for CGI scripts
        21.4. wsgiref — WSGI Utilities and Reference Implementation
        21.5. urllib — URL handling modules
        21.6. urllib.request — Extensible library for opening URLs
        21.7. urllib.response — Response classes used by urllib
        21.8. urllib.parse — Parse URLs into components
        21.9. urllib.error — Exception classes raised by urllib.request
        21.10. urllib.robotparser — Parser for robots.txt
        21.11. http — HTTP modules
        21.12. http.client — HTTP protocol client
        21.13. ftplib — FTP protocol client
        21.14. poplib — POP3 protocol client
        21.15. imaplib — IMAP4 protocol client
        21.16. nntplib — NNTP protocol client
        21.17. smtplib — SMTP protocol client
        21.18. smtpd — SMTP Server
        21.19. telnetlib — Telnet client
        21.20. uuid — UUID objects according to RFC 4122
        21.21. socketserver — A framework for network servers
        21.22. http.server — HTTP servers
        21.23. http.cookies — HTTP state management
        21.24. http.cookiejar — Cookie handling for HTTP clients
        21.25. xmlrpc — XMLRPC server and client modules
        21.26. xmlrpc.client — XML-RPC client access
        21.27. xmlrpc.server — Basic XML-RPC servers
        21.28. ipaddress — IPv4/IPv6 manipulation library
    22. Multimedia Services
        22.1. audioop — Manipulate raw audio data
        22.2. aifc — Read and write AIFF and AIFC files
        22.3. sunau — Read and write Sun AU files
        22.4. wave — Read and write WAV files
        22.5. chunk — Read IFF chunked data
        22.6. colorsys — Conversions between color systems
        22.7. imghdr — Determine the type of an image
        22.8. sndhdr — Determine type of sound file
        22.9. ossaudiodev — Access to OSS-compatible audio devices
    23. Internationalization
        23.1. gettext — Multilingual internationalization services
        23.2. locale — Internationalization services
    24. Program Frameworks
        24.1. turtle — Turtle graphics
        24.2. cmd — Support for line-oriented command interpreters
        24.3. shlex — Simple lexical analysis
    25. Graphical User Interfaces with Tk
        25.1. tkinter — Python interface to Tcl/Tk
        25.2. tkinter.ttk — Tk themed widgets
        25.3. tkinter.tix — Extension widgets for Tk
        25.4. tkinter.scrolledtext — Scrolled Text Widget
        25.5. IDLE
        25.6. Other Graphical User Interface Packages
    26. Development Tools
        26.1. typing — Support for type hints
        26.2. pydoc — Documentation generator and online help system
        26.3. doctest — Test interactive Python examples
        26.4. unittest — Unit testing framework
        26.5. unittest.mock — mock object library
        26.6. unittest.mock — getting started
        26.7. 2to3 - Automated Python 2 to 3 code translation
        26.8. test — Regression tests package for Python
        26.9. test.support — Utilities for the Python test suite
    27. Debugging and Profiling
        27.1. bdb — Debugger framework
        27.2. faulthandler — Dump the Python traceback
        27.3. pdb — The Python Debugger
        27.4. The Python Profilers
        27.5. timeit — Measure execution time of small code snippets
        27.6. trace — Trace or track Python statement execution
        27.7. tracemalloc — Trace memory allocations
    28. Software Packaging and Distribution
        28.1. distutils — Building and installing Python modules
        28.2. ensurepip — Bootstrapping the pip installer
        28.3. venv — Creation of virtual environments
        28.4. zipapp — Manage executable python zip archives
    29. Python Runtime Services
        29.1. sys — System-specific parameters and functions
        29.2. sysconfig — Provide access to Python’s configuration information
        29.3. builtins — Built-in objects
        29.4. __main__ — Top-level script environment
        29.5. warnings — Warning control
        29.6. contextlib — Utilities for with-statement contexts
        29.7. abc — Abstract Base Classes
        29.8. atexit — Exit handlers
        29.9. traceback — Print or retrieve a stack traceback
        29.10. __future__ — Future statement definitions
        29.11. gc — Garbage Collector interface
        29.12. inspect — Inspect live objects
        29.13. site — Site-specific configuration hook
        29.14. fpectl — Floating point exception control
    30. Custom Python Interpreters
        30.1. code — Interpreter base classes
        30.2. codeop — Compile Python code
    31. Importing Modules
        31.1. zipimport — Import modules from Zip archives
        31.2. pkgutil — Package extension utility
        31.3. modulefinder — Find modules used by a script
        31.4. runpy — Locating and executing Python modules
        31.5. importlib — The implementation of import
    32. Python Language Services
        32.1. parser — Access Python parse trees
        32.2. ast — Abstract Syntax Trees
        32.3. symtable — Access to the compiler’s symbol tables
        32.4. symbol — Constants used with Python parse trees
        32.5. token — Constants used with Python parse trees
        32.6. keyword — Testing for Python keywords
        32.7. tokenize — Tokenizer for Python source
        32.8. tabnanny — Detection of ambiguous indentation
        32.9. pyclbr — Python class browser support
        32.10. py_compile — Compile Python source files
        32.11. compileall — Byte-compile Python libraries
        32.12. dis — Disassembler for Python bytecode
        32.13. pickletools — Tools for pickle developers
    33. Miscellaneous Services
        33.1. formatter — Generic output formatting
    34. MS Windows Specific Services
        34.1. msilib — Read and write Microsoft Installer files
        34.2. msvcrt — Useful routines from the MS VC++ runtime
        34.3. winreg — Windows registry access
        34.4. winsound — Sound-playing interface for Windows
    35. Unix Specific Services
        35.1. posix — The most common POSIX system calls
        35.2. pwd — The password database
        35.3. spwd — The shadow password database
        35.4. grp — The group database
        35.5. crypt — Function to check Unix passwords
        35.6. termios — POSIX style tty control
        35.7. tty — Terminal control functions
        35.8. pty — Pseudo-terminal utilities
        35.9. fcntl — The fcntl and ioctl system calls
        35.10. pipes — Interface to shell pipelines
        35.11. resource — Resource usage information
        35.12. nis — Interface to Sun’s NIS (Yellow Pages)
        35.13. syslog — Unix syslog library routines
    36. Superseded Modules
        36.1. optparse — Parser for command line options
        36.2. imp — Access the import internals
    37. Undocumented Modules
        37.1. Platform specific modules

