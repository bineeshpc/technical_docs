* Data Structures and Algorithms
** Algorithm analysis

Scientific method
The very same approach that scientists use to understand the
natural world is effective for studying the running time of programs:
*** Observe some feature of the natural world, generally with precise measurements.
*** Hypothesize a model that is consistent with the observations.
*** Predict events using the hypothesis.
*** Verify the predictions by making further observations.
*** Validate by repeating until the hypothesis and observations agree.

One of the key tenets of the scientific method is that the experiments we design must
be reproducible, so that others can convince themselves of the validity of the hypothesis.
Hypotheses must also be falsifiable, so that we can know for sure when a given hypoth-
esis is wrong (and thus needs revision). As Einstein famously is reported to have said
(“No amount of experimentation can ever prove me right; a single experiment can prove
me wrong”), we can never know for sure that any hypothesis is absolutely correct; we
can only validate that it is consistent with our observations.

** Recursion
https://bitbucket.org/bineeshpc/problemsolving/src/default/datastructures/recursion_and_backtracking/

Defining something in terms of itself

Writing a function that calls itself
Works well for problems that are self similar.

factorial N = 1  if N == 0
factorial N - 1 = factorial (N - 1) * N if N > 1



int fact(int n) {
    int result = 1;
    for (i = 2; i <= n ; i++) { 
        result * = i;
    }
    return result;
}


fact(4) ==> return fact(3) * 4                24
                ==> return fact(2) * 3        6
                    ==> return fact(1) * 2    2
                      ==> return fact(0) * 1  1
                         ==> return 1


directories in a file

escaping from a maze

anagrams 
*** Recursion and cases
Base case
Recursive cases

Small part of the work
Recursion to handle the case

Key idea

You handle the small part of overall task yourself and then make recursive call to handle the rest

Self similar

How can I describe the algorithm in terms of a smaller or simpler version of itself?


Recursive tracing

int mystery(int in) {
   if n < 10 return n
   else {
       int a = n / 10
       int b = n % 10;
       return mystery(a+b)
 }


int power(int base, int exp) {
    if (exp < 0) {
        throw exp;  //cpp specific
    }
    if (exp == 0) {
        return 1
    }
    else {
         return base * power(base, exp - 1)
    }
}

power(2, 3)                8
  2 * power(2, 2)          2 * 4
      2 * power(2, 1)      2 * 2
          2 * power(2, 0)  2 * 1
              1

Recursive zen 

art of properly identifying the base set of cases for a recursive algorithm and expressing the elegantly
*** Precondition
Throwing exception

Catch exception and handle it

int power(int base, int exp) {
    if (exp < 0) {
        throw exp;  //cpp specific
    }
    if (exp == 0) {
        return 1
    }
    else {
         if(exp % 2 == 0) {
             return 2 * power(base, exp / 2);
             // or return power(base * base, exp / 2);
         } else {
             return base * power(base, exp - 1);
         }
    }
}


a ^ 6 = a ^ 3 + a ^ 3 


int isPalindrome(char [] str) {
    begin = 0
    end = str.length - 1
    return isPalindrome(char [] str, begin, end)
}

int isPalindrome(char [] str, begin, end) {
    if(begin >= end) {
        return 1
    }
    else if (str[begin] == str[end]) {
        return isPalindrome(str, begin + 1, end - 1)
    } else {
        return 0
    }
}

madam

0 4

isPalindrome("madam", 0, 4)
    isPalindrome("madam", 1, 3)
        isPalindrome("madam", 2, 2)
            return 1


isPalindrome("bini", 0, 3)
    return 0 


isPalindrome
   first and last are same
   and this is true for a substring of str[from index 1 to str.length - 2]


Rather than running away from my problem it is better to embrace them.


Inorder to understand recursion you need to understand recursion

** Stacks
** Queues
** Linked lists
** Sorting
** Searching
** Priority queues
** Trees
** Graphs
** Selection
** Symbol tables
** Hash tables
** String algorithms
** Disjoint sets
** Algorithm design techniques
** Greedy algorithms
** Divide and conquer
** Dynamic programming
*** DP Lecture 1
The notes I took from Erics lecture from MIT
Links to the lecture notes are also there here.
check this out if the notes by me are not clear enough.

Dynamic programming
https://www.youtube.com/watch?v=OQ5jsbhAv_M&feature=youtu.be

Alg design techniques

Optimization problems
Careful brute force


Richard Bellman - Inventor

Hide that I am doing mathematical research!!

Subproblems

Naive recursive alg for fib

fib(n) {
if n <= 2 f = 1

else { f = fib(n-1) + fib(n-2) }

return f

}


exponential time


T(n) = T(n-1) + T(n-2) + Theta (1)


T(n) >= 2 T(n-2) 

= Theta(2 ^ n /2 )

Memoization

Bad algorithms good by doing memoization

memo

fib(n): 

if n is in memo returm memo[n]
else
f = fib(n-1) + fib(n-2)
memo[n] = f
return f


F(n)
Multiple invocation of the same subproblem again and again is eliminated by doing memoization


Some calls are free in dp

fib(k) only recurses the first time called for all K


memoized calls cost Theta(1) constant time


# of non memoized calls is n

fib(1), fib(2) ... fib(n)

If we dont count the recursions 

non recursive work per call is constant

time = Theta(n)


DP: memoization(remember)

all solutions and reuse


solve subproblems and then solve the actual problem

Recursion + memoization


time = number of subproblems * time spent on subproblems


Don't count memoized recursions


I dont want to double count


Bottom up DP algorithms

fib = {}

for k in range(n);
    if k<=2
        f = 1
    else:
        f = fib[k-1] + fib[k-2]
    fib[k] = f
return fib[n] 


Bottom up exactly the same computation


Topological sort of the subproblems dependency

DAG

f1 -> f2 -> f3 ... fn-1 -> fn

We are doing a topological sort, but in case of fib we did it in our head


Bottom up needs less space
Save space


Linear time, constant space


Shortest path

Single source shortest path

Memoize and then bottom upify

delta(s, v) for all v

Tool is 
Guessing

don't know 
the answer guess

Dont try any guess, try them all


DP recursion + memoization + guessing

Carefull guesses,
 Take the best one

s -> x -> x -> x -> v

s -> s prime

try all possibilities from s to s prime

Guess the first edge.

Single target means guess first edge.


u -> v Guess the last edge because of single source


Guess and try every last edge from u to v

And recursively compute the path from s to v


Bellman ford


delta(s, v) = delta(s,u) + w(u, v)


(u, v) element of E 


recursive call


exponential algorithm

memoization 

delta(s,v) if it is memo then return
otherwise compute


On graphs with cycles this algorithm does not work

This tries to compute itself recursively and results in infinite recursion

Infinite time on graphs with cycles

on DAGs O(V+E)

time for subproblem delta(s, v)
= indegree(v)+1

total time = sigma indegree(v) = theta(v)
              for v element of V 


subproblem dependency should be acyclic


- more subproblems remove cyclic dependencies

delta(s, v) = shortest s-> v path using

<= k edges

- recurrance

delta subscript k (s, v) = min { delta subscript k - 1 (s, u) + w(u, v) for all (u, v) element of E }

delta subscript phi or no edges (s, v) = infinity for s != v  basecase
delta subscript k (s , s) = phi for any k  basecase


goal delta(s, v) = delta subscript |v| - 1 (s, v)


memoize
time = # of subproblems . time / subproblem

       |v| . |v|          O(V) = O(V ^ 3)

actually theta(indegree(v)) for delta subscript k(s, v)

time = theta(V sigma v element of V indegree(V)) = theta(VE)

bellman ford


https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/lecture-videos/MIT6_006F11_lec19_orig.pdf

https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/lecture-videos/MIT6_006F11_lec19.pdf
*** DP Lecture 2

Careful bruteforce

guessing + recursion + memoization

Shortest paths in some Dag

time = # subproblems  * time / subproblem

treating recursive calls as theta(1) the second time onwards



5 easy steps to DP

1. define subproblems -> # subproblems

2. Guess part of the solution -> choices of guess

3. Relate subproblem solutions -> time subproblems

4. Recurse and memoize -> check subproblem dependency is acyclic

or build DP table bottom up


5. Solve original problem  -> check whether the original problem is solved , need extra time


Text justification
-------------------

Split text into good lines


Text = list of words

badness (quantity)

badness(i, j) = {(page width - total width ) ^ 3

use words[i:j] as line { infinity if line does not fit


1. subproblems : suffixes words [i:]
 - # subproblems: n
2. Guess Where to start 2nd line 
   for those words

 -# choices for guess <= n-i = O(n)

3. Recurrence DP(i)

= min ( DP(j) + badness(i, j) 

         for j in range(i+1, n+1)
       )


cost of first line = badness(i, j)

4. Topological order

i is expressed in terms of j which is larger than i

so j must be computed before n

ordering is from end to beginning


i = n, n-1, n-2, ... 1

total time = number of subproblems * time per subproblem

total time = theta(n ^ 2)

5. Original problem 

DP(0)

we start from to n.
We solve DP(0)
and we are done




Parent pointers
---------------

Remember which guess was best


what was the value of j which gave you the min

that value of j is the parent pointer


we follow the parent pointer to find out our best solution


0 -> parent(0) -> parent(1) --> ... parent(n)



Perfect information Blackjack


deck = c-, c1, .. cn-1

1 player vs dealer

$1 bet / hand

1. subproblems suffix Ci
2. guess  how may hits?
   # choices <= n
3. recurrence 

B(i) = max(outcome element of {-1, 0, 1}
 + B(j) for # of hits in range(0, n)

if valid play

i + 4 + # hits + # dealer hits
*** DP Lecture 3


Subproblems for strings

Paranthesization

Edit distance and LCS

Knapsack

Pseudopolynomial time


Subproblems for strings or sequences


Suffixes x[i:] for all i

Prefixes x[:i] for all i

substring x[i:j] for all i <= j

theta (n ^ 2) 


Paranthesization:

Optimal evaluation of associative expression 

((A0.A1) . (..) . ) A n-1




1. subproblem = optimal evaluaion of Ai to Aj-1 

2. guess outmost/last multiplication

(A0 -- Ak) .. (Ak... A n-1)


3. Recurrence
min( DP(i, k) + cost of Aj:j . Ak:j for k in range(i+1, j)
)



4. time = theta(n^3)

increasing substring size

longest substring


See more examples and write code to do it


Dynamic program is easy once you get it

Edit distance

given two strings x and y what is the cheapest possible sequence of character edits to turn x & y 

insert c
delete c
replace c to c'


Dna sequence, mutation, edit distance


Longest common subsequence problem

heiroglyphology

michael angelo


cost of an insert or delete = 1
replace = { 0 if c = c'
c->c' {infinity otherwise


1. subproblem = edit distance on x[i:] and y[j:] for all i , j

# subprobs = theta(|x| . |y|)

2. Guess all possibilities

replace x[i] with y[j]
insert y[j]
delete x[i]


3. Recurrance

DP(i, j) = min(cost of replace x[i] -> y[j] + DP(i+1, j+1), 
cost of insert y[j] + DP(i, j+1),
cost of delete x[i] + DP(i+1, j)


4. Topological order

smallest suffixes in the end to the beginning


for i = x down to 0

   for j = y down to 0


each of the cells in the matrix is a node in the dag


5. DP(0, 0)


shortest path from bottom right corner to top left corner




theta (1) subprob


time = theta(|x|. |y|)



Knapsack


list of items

each of them has a size


 




** Complexity classes
** Misc
* Problem
** Given an array find the kth smallest element in the array
Expected time complexity O(n)
Given that all the elements are distinct
Quicksort partition is used
the algorithm takes O(n) time

first time the partition algorithm spans over the full array
from next time onwards it searches a smaller array
and the total comparison is atmost 2N
Refer any algorithm book for more inputs

#+BEGIN_SRC python :results output
  import random

  def swap(a, i, j):
      temp = a[i]
      a[i] = a[j]
      a[j] = temp
      
  def partition(a, lo, hi):
      too_big_index = lo
      too_small_index = hi
      
      while too_big_index < too_small_index:
          
          while a[too_big_index] <= a[lo] and too_big_index < hi:
              too_big_index += 1
          
          while a[too_small_index] > a[lo] and too_small_index > lo:
              too_small_index -= 1
          if too_big_index < too_small_index:
              swap(a, too_big_index, too_small_index)
      swap(a, lo, too_small_index)
      return too_small_index
      
  def k_th_smallest(a, k):
      b = [i for i in a] # take a copy of so that it can be played with
      lo = 0
      hi = len(b) - 1
      while lo < hi:
          index = partition(b, lo, hi)
          if k < index:
              hi = index - 1
          elif k > index:
              lo = index + 1
          else:
              return b[k]
      return b[k]


  def test(a, n):
      print(a)
      sorted_a = sorted(a)
      element = k_th_smallest(a, n)
      print(sorted_a), element
      assert element == sorted_a[n]
      


  def main():
      x = range(1, 100)
      output = []
      for y in range(20):

          r = random.randint(1, 80)
          output.append(x[r])

      a = output
      k = 4
      test(a, k)

      
  if __name__ == '__main__':
      main()

#+END_SRC

#+RESULTS:

* Competitive coding
file:competitive_programming.org

https://www.quora.com/What-are-some-good-coding-competition-practice-sites
https://www.quora.com/What-is-the-best-strategy-to-improve-my-skills-in-competitive-programming-in-C++-in-2-3-months
https://www.quora.com/What-was-Anudeep-Nekkantis-Competitive-Programming-strategy-to-become-35th-in-Global-ranking-in-just-6-7-months/answer/Anudeep-Nekkanti
https://www.quora.com/How-does-one-become-a-great-coder-programmer
https://www.quora.com/How-should-I-practice-so-that-I-will-be-at-a-level-where-I-can-approach-TopCoders-Div1-500-problems-with-confidence-I-am-a-rookie-with-zero-competitive-programming-experience
https://www.quora.com/What-is-needed-to-become-good-algorithmist-like-top-rankers-in-Topcoder-Spoj-GCJ/answer/Pradeep-George-Mathias
https://www.quora.com/How-did-Rudradev-Basak-Pradeep-George-Mathias-and-Nikhil-Garg-learn-algorithms-Did-they-use-online-tutorials-from-TopCoder-CodeChef-etc-or-books-like-Cormen-and-Knuth-How-did-they-structure-their-time-in-college-to-practice-for-OPCs/answer/Pradeep-George-Mathias

*** Algorithm for competitive coding
https://www.quora.com/How-do-I-learn-competitive-coding-on-my-own-Where-can-I-learn-the-basic-concepts

Here is the algorithm to learn data structures and algorithms :-) You can learn them in any language of your choice.

List all the DS and Algo you want to learn. Pick one. Say: XYZ.
Search the Internet for: “What is XYZ”, “Applications of XYZ”, “Pros and cons of XYZ”, etc. Follow the first three links and see how much they make sense (don’t bother if the link is from Wikipedia, popular school, blog, corporation, whatever. Google is good enough to rank the articles for you).
Repeat the search on YouTube (use 1.5 or 2x speed for videos if required).
Refine the search terms and/or web resources to search in and continue reading & listening until you totally get that XYZ and its uses.
IF you are preparing for interviews, go to geeksforgeeks (or any ‘hot’ and relevant website) and search for problems specific to XYZ. Are you able to solve a few (5–10) random problems without looking at their answers?
Yes → Goto step 5.
No → Goto step 3.
Pick the next item in your list. Goto step 2.
Here is the list I recommend you begin with:

Data structures: Array, Linked List, Stack, Queue, Hash Table, BST, Map (Hash Table vs BST), Set, Trie, Graph.

Algorithms: Time complexity, Space complexity, Recursion, Divide & Conquer, Sorting, Searching, BFS & DFS, Dynamic programming, Bit manipulations, Greedy approach.
** Youtube channels
http://codeforces.com/blog/entry/43578?locale=en


* Free online resources to learn algorithms
http://www.techvyom.com/free-online-resources-learning-algorithms-data-structures.html

* Top 10 interview questions
https://www.geeksforgeeks.org/top-10-algorithms-in-interview-questions/

** String questions

#+BEGIN_SRC python :results output
from string import punctuation

all_punctuations = set(punctuation)

def reverse_without_changing_punctuations(str1):
    str_list = list(str1)
    begin = 0
    end = len(str_list) - 1
    def get_next_indices(first, last, str_list):
        if first >= last:
            return (None, None)
        else:
            next_left_index = first
            next_right_index = last
            while next_left_index < next_right_index:
                if str_list[next_left_index] in all_punctuations:
                    next_left_index += 1
                else:
                    break
            while next_left_index < next_right_index:
                if str_list[next_right_index] in all_punctuations:
                    next_right_index -= 1
                else:
                    break
            if next_left_index >= next_right_index:
                return (None, None)
            else:
                return (next_left_index, next_right_index)

    next_left_index = begin
    next_right_index = end
    while next_left_index < next_right_index:
        next_left_index, next_right_index = get_next_indices(next_left_index, next_right_index, str_list)
        if next_left_index is not None and next_right_index is not None:
            temp = str_list[next_left_index]
            str_list[next_left_index] = str_list[next_right_index]
            str_list[next_right_index] = temp
            next_left_index += 1
            next_right_index -= 1
        else:
            break

    return ''.join(str_list)


def process():
    t = int(raw_input())
    for i in range(t):
        str1 = raw_input()
        print(reverse_without_changing_punctuations(str1))

process()

#+END_SRC
