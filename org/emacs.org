* Installation on ubuntu

#+BEGIN_SRC sh :dir /sudo:: :results output
2>&1 apt install emacs-goodies-el

#+END_SRC

#+RESULTS:


* Things to know
** Moving around
C - control
M - Meta (In no meta Esc release then type character)
C-x C-c (quit emacs)
C-g (quit a partially entered command)

C-v next screen
M-v previous screen
C-l 

      C-p
C-b        C-f
      C-n

** Getting help


You can get help for a command by typing

C-h c command-name

This will usually tell you if it is bound to a key. (If multiple bindings are set for the command they will all be listed.)

Given a key sequence, you can type

C-h k key-sequence

To get the command that would run.

You can get detailed information about a command, also any non-interactive function defined, by typing

C-h f function-name

Which give you detailed information about a function, which will include any key bindings for it.

C-h f variable-name

Key-maps are kept in variables, however the key codes are stored in a raw format. Try C-h v isearch-mode-map for an example.

For more help on getting help, you can type

C-h ?

* DONE How to schedule recurring meeting
  SCHEDULED: <2016-10-20 Thu>
+1d, +1w, +1m etc can be added to schedule recurring meeting

++1d to shift time to future
.+1d to shift time to today + 1d future

TODO Empty kitchen trash
   2008-02-15 Wed 20:00 ++1d
        Marking this DONE will shift the date by at least one day, and
        also by as many days as it takes to get the timestamp into the
        future.  Since there is a time in the timestamp, the next
        deadline in the future will be on today's date if you
        complete the task before 20:00.
Check the batteries in the smoke detectors
   2008-02-15 Wed 20:00 .+1d

        Marking this DONE will shift the date to one month after
        today.
* How to add tags?
C-c C-q and add the tag
* Global visual line mode for line wrap
M-x global-visual-line-mode
* Toggle truncate lines
M-x toggle-truncate-lines
* DONE How to save or tangle a source yes
in org mode?
org-babel-tangle
    Tangle the current file. Bound to C-c C-v t.

    With prefix argument only tangle the current 'src' code block. 
#+BEGIN_SRC python :results output :tangle yes :tangle /tmp/source_code134.py
print 1
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh :results output
cat /tmp/source_code134.py
#+END_SRC

#+RESULTS:
: 
: print 1

* How to hide body in org mode?
M-x hide-body
#+BEGIN_SRC elisp
(hide-body)
#+END_SRC

#+RESULTS:

* Install elpy

https://github.com/jorgenschaefer/elpy

#+BEGIN_SRC elisp
(require 'package)
(add-to-list 'package-archives
             '("elpy" . "https://jorgenschaefer.github.io/packages/"))
(package-refresh-contents)

#+END_SRC
Followed by M-x package-install RET elpy RET

* DONE Install a separate emacs compiled from source
  SCHEDULED: <2017-07-14 Fri>

Did this but had a few issues
Probably png will not work in emacs.
Because I used libpng12-dev because other versions were giving me problems
I went ahead with libpng12-dev and with-png=no option for the time being.
Installation worked.
I should probably test it and slowly migrate to this version of emacs.

#+BEGIN_SRC sh :dir /sudo:: :results output
#2>&1 apt install libxpm-dev 
apt install libjpeg-dev lib-gif libtiff libpng12-dev

#+END_SRC

#+RESULTS:


#+BEGIN_SRC sh :results output
cd ~/temp
rm -rf emacs
mkdir -p emacs
cd emacs-25.2
make clean > /dev/null
make distclean > /dev/null
./autogen.sh > /tmp/autogen.out
echo $?
#./configure --prefix=$HOME/temp/emacs
./configure --with-x-toolkit=gtk3 --with-png=no --prefix=$HOME/temp/emacs > /tmp/configure.out
#./configure --with-x-toolkit=gtk3 --prefix=$HOME/temp/emacs > /tmp/configure.out
echo $?
make > /tmp/make.out
echo $?
make install > /tmp/install.out
echo $?
#+END_SRC

#+RESULTS:
: 0
: 0
: 0
: 0

* DONE Play around with new version of emacs
  SCHEDULED: <2017-12-30 Sat 13:30>

* Literate programming Test tangle with multiple source tangled to same output file
This can be used for literate programming

** Part 1
This is part one of the program
#+BEGIN_SRC python :tangle yes :tangle /tmp/test_tangle123.py
print "part 1"
#+END_SRC

** Part 2
This is part two of the program
#+BEGIN_SRC python :tangle yes :tangle /tmp/test_tangle123.py
print "part 2"
#+END_SRC


** Part 3
This is part three of the program
#+BEGIN_SRC python :tangle yes :tangle /tmp/test_tangle123.py
print "part 3"
#+END_SRC

** Part 4
This is part one of the program
#+BEGIN_SRC python :tangle yes :tangle /tmp/test_tangle123.py
print "part 4"
#+END_SRC

* Remote editing of files


For GNU Emacs

    C-x C-f /remotehost:filename  RET (or /method:user@remotehost:filename)

For XEmacs use the syntax

    C-x C-f /[method/user@remotehost]/filename

You can also edit local files as root with either of the following (note the double colon, which is required)

    C-x C-f /su::/etc/hosts
    C-x C-f /sudo::/etc/hosts

* Good tutorial
http://ehneilsen.net/notebook/orgExamples/org-examples.html

* Insert file contents in emacs
https://www.gnu.org/software/emacs/manual/html_node/elisp/Reading-from-Files.html
M x insert-fil
(insert-file-contents /tmp/c.sh nil)
* Org mode batch execution

This script can be used to execute an entire org mode file from commandline
Output cannot be seen
But I will figure out that

Org security is overridden with 
(setq org-confirm-babel-evaluate nil)
https://orgmode.org/manual/Code-evaluation-security.html
https://orgmode.org/manual/Batch-execution.html

#!/bin/sh
# tangle files with org-mode
#
emacs -Q --batch --eval "
    (progn
      (require 'ob-tangle)
      ;; programming languages supported in org mode
(org-babel-do-load-languages
 'org-babel-load-languages '(
(python . t)
(sh . t)
(scala . t)
(C . t)
(java . t)
(plantuml . t)
(scheme . t)
(latex . t)
;;(ipython . t)
))
(setq org-confirm-babel-evaluate nil)
      (dolist (file command-line-args-left)
        (with-current-buffer (find-file-noselect file)
          (org-babel-execute-buffer))))
  " "$@" 


* Interesting cheatsheet about org babel
https://necromuralist.github.io/posts/org-babel-cheat-sheet/

Learned about org-babel-execute-buffer from above link

* Literate devops in org mode

http://www.howardism.org/Technical/Emacs/literate-devops.html


** Idea is to check the movies in my raspberry pi

:PROPERTIES:
:var: machine="10.47.47.10"
:results: output
:END:

#+NAME: files_list
#+BEGIN_SRC sh :results list
ls | head -3
#+END_SRC      

#+RESULTS: files_list
: - agile.org
: - angular2-writeup.org
: - angular2-writeup.org~

#+BEGIN_SRC sh :var my_list=files_list
echo $my_list

#+END_SRC

#+RESULTS:
: agile.org angular2-writeup.org angular2-writeup.org~

#+BEGIN_SRC sh :dir /usr
ls
#+END_SRC

#+RESULTS:
: bin
: games
: include
: lib
: local
: locale
: sbin
: share
: src


#+BEGIN_SRC sh :dir /ssh:pi@10.47.47.10:/usr
ls
#+END_SRC

#+RESULTS:
: bin  games  include  lib  local  man  sbin  share  src


#+BEGIN_SRC sh :session client
ssh pi@10.47.47.10
#+END_SRC

#+RESULTS:
#+begin_example

> > > bineesh@ubuntu-16:~/temp/projects$ Linux raspberrypi 4.14.34-v7+ #1110 SMP Mon Apr 16 15:18:51 BST 2018 armv7l

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
You have new mail.
Last login: Sun Feb  3 16:32:33 2019 from 10.47.47.16
#+end_example

#+BEGIN_SRC sh :session client
hostname
#+END_SRC

#+RESULTS:
: 
: > > pi@raspberrypi:~$ raspberrypi

#+BEGIN_SRC sh :session client
filename=/tmp/read_movies.py
cat > $filename << 'delim'
import os
filename = '/tmp/movies.txt'
lines = [line.strip() for line in open(filename)]
print('')
s = set()
for i in range(0, len(lines), 4):
    filmname = lines[i]
    to_search = filmname.strip().split()[0]
    s.add(to_search)
s.remove('excuted')
os.system('mkdir /tmp/movies')
cmd = '/usr/bin/python ~/agile/get_movie_links/analyse.py {word} > /tmp/movies/{word}.txt'
for word in s:
    cmd_concrete = cmd.format(word=word)
    print(cmd_concrete)
    os.system(cmd_concrete)
delim
cd ~/agile/get_movie_links
python $filename
#+END_SRC

#+RESULTS:
: 
: > > pi@raspberrypi:~/agile/get_movie_links$ pi@raspberrypi:~/agile/get_movie_links$ > > > > > > > > > > > > > > > > > pi@raspberrypi:~/agile/get_movie_links$ pi@raspberrypi:~/agile/get_movie_links$ 
: mkdir: cannot create directory ‘/tmp/movies’: File exists
: /tmp/movies/Vantha.txt
: /tmp/movies/Evanukku.txt
: /tmp/movies/Maari.txt
: /tmp/movies/Ezhumin.txt
: /tmp/movies/Thuppakki.txt

#+BEGIN_SRC sh :session client
cd /tmp
cat ~/bin/get_movies.sh
#python3 -m http.server
#+END_SRC

#+RESULTS:
: 
: > > pi@raspberrypi:/tmp$ pi@raspberrypi:/tmp$ #!/bin/sh
: cd /tmp
: timeout 7200 python3 -m http.server &
: sleep 5
: cd /home/pi/agile/get_movie_links
: python3 get_movie_links.py | tee /tmp/movies.txt

