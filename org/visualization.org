* Visualization
http://achariam.com/dataviz/
1. Good data visualization is informative
Well presented data forms the backbone of a compelling story. It has the power to strengthen and illuminate a narrative—improving understanding and focusing on what’s important.

2. Good data visualization is well balanced
Communicating quantitative data effectively requires the right balance of components. Color is used with purpose and is not distracting. All parts are labeled and include a legend when necessary. The scale of the visualization must be immediately identifiable. The standard lexicon of graphs are often all that is required—do not use pie charts.

3. Good data visualization is equally concerned with what is not displayed
People are easily overwhelmed with extraneous details. Simplify and reduce what is being presented to what is essential.

4. Good data visualization is created with pure data
Avoid utilizing muddy or incomplete sources of data. Misleading the audience with false information or lack of clarity is in poor taste. Ultimately, good data visualization enables better decisions and actions.

5. Good data visualization is human
Parsing large data quantities of data is beyond human perception. The goal with any kind of data visualization is to augment and improve human perception. Just like a microscope it allows us to explore data within the realm of our understanding.



** Data exploration in R

#+BEGIN_SRC sh
binisearch.py -o 'Data exploration in R'
#+END_SRC

Hist, boxplot etc

** Univariate bivariate and multivariate visualization

#+BEGIN_SRC sh
binisearch.py -o 'Univariate bivariate and multivariate visualization'
#+END_SRC

#+RESULTS:


** ggplot2

#+BEGIN_SRC sh
binisearch.py -o 'ggplot2'
#+END_SRC


** Common code
#+BEGIN_SRC python :session
def display_inline(filename):
    plt.savefig(filename)
    print()
    print('[[{}]]'.format(filename))

#+END_SRC

#+RESULTS:



** Histogram and Pie(Uni)

#+BEGIN_SRC sh
binisearch.py -o 'Histogram and Pie(Uni)'
#+END_SRC


#+BEGIN_SRC python :session :results output :exports both
# alpha is opacity

import numpy as np
#import matplotlib.mlab as mlab
import matplotlib.pyplot as plt
 
x = [21,22,23,4,5,6,77,8,9,10,31,32,33,34,35,36,37,18,49,50,100]
num_bins = 5
n, bins, patches = plt.hist(x, num_bins, facecolor='blue', alpha=0.1)
#plt.show()
display_inline('./images/histogram.png')

#+END_SRC

#+RESULTS:
: 
: >>> >>> ... >>> ... >>> >>> >>> ... 
: [[./images/histogram.png]]

** Tree and Treemap

#+BEGIN_SRC sh
binisearch.py -o 'Tree and Treemap'
#+END_SRC

#+RESULTS:

https://python-graph-gallery.com/200-basic-treemap-with-python/

#+BEGIN_SRC python :session :results output :exports both

# libraries 
import matplotlib.pyplot as plt 
import squarify # pip install squarify (algorithm for treemap) 

# If you have 2 lists 
squarify.plot(sizes=[13,22,35,5], label=["group A", "group B", "group C", "group D"]) 
plt.axis('off') 
display_inline('./images/treemap1.png')

# If you have a data frame? 
import pandas as pd 
df = pd.DataFrame({'nb_people':[8,3,4,2], 'group':["group A", "group B", "group C", "group D"] }) 
squarify.plot(sizes=df['nb_people'], label=df['group']) 
plt.axis('off') 
display_inline('./images/treemap2.png')


#+END_SRC

#+RESULTS:
: 
: ... >>> >>> >>> ... <matplotlib.axes._subplots.AxesSubplot object at 0x7f8ce6ef6dd8>
: (0.0, 100.0, 0.0, 100.0)
: [[./images/treemap1.png]]
: ... >>> >>> <matplotlib.axes._subplots.AxesSubplot object at 0x7f8ce6ef6dd8>
: (0.0, 100.0, 0.0, 100.0)
: [[./images/treemap2.png]]

** Dendrogram

https://python-graph-gallery.com/400-basic-dendrogram/

#+BEGIN_SRC python :session :results output :exports both

# Libraries
import pandas as pd
from matplotlib import pyplot as plt
from scipy.cluster.hierarchy import dendrogram, linkage
import numpy as np

# Import the mtcars dataset from the web + keep only numeric variables
url = 'https://python-graph-gallery.com/wp-content/uploads/mtcars.csv'
df = pd.read_csv(url)
df = df.set_index('model')
del df.index.name
df


# Calculate the distance between each sample
# You have to think about the metric you use (how to measure similarity) + about the method of clusterization you use (How to group cars)
Z = linkage(df, 'ward')


# Make the dendrogram
plt.title('Hierarchical Clustering Dendrogram')
plt.xlabel('sample index')
plt.ylabel('distance (Ward)')
dendrogram(Z, labels=df.index, leaf_rotation=90)

#plt.show()
display_inline('./images/dendrogram.png')

#+END_SRC

#+RESULTS:
#+begin_example

... >>> >>> >>> >>> >>> ... >>> >>>                       mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  carb
Mazda RX4            21.0    6  160.0  110  3.90  2.620  16.46   0   1     4     4
Mazda RX4 Wag        21.0    6  160.0  110  3.90  2.875  17.02   0   1     4     4
Datsun 710           22.8    4  108.0   93  3.85  2.320  18.61   1   1     4     1
Hornet 4 Drive       21.4    6  258.0  110  3.08  3.215  19.44   1   0     3     1
Hornet Sportabout    18.7    8  360.0  175  3.15  3.440  17.02   0   0     3     2
Valiant              18.1    6  225.0  105  2.76  3.460  20.22   1   0     3     1
Duster 360           14.3    8  360.0  245  3.21  3.570  15.84   0   0     3     4
Merc 240D            24.4    4  146.7   62  3.69  3.190  20.00   1   0     4     2
Merc 230             22.8    4  140.8   95  3.92  3.150  22.90   1   0     4     2
Merc 280             19.2    6  167.6  123  3.92  3.440  18.30   1   0     4     4
Merc 280C            17.8    6  167.6  123  3.92  3.440  18.90   1   0     4     4
Merc 450SE           16.4    8  275.8  180  3.07  4.070  17.40   0   0     3     3
Merc 450SL           17.3    8  275.8  180  3.07  3.730  17.60   0   0     3     3
Merc 450SLC          15.2    8  275.8  180  3.07  3.780  18.00   0   0     3     3
Cadillac Fleetwood   10.4    8  472.0  205  2.93  5.250  17.98   0   0     3     4
Lincoln Continental  10.4    8  460.0  215  3.00  5.424  17.82   0   0     3     4
Chrysler Imperial    14.7    8  440.0  230  3.23  5.345  17.42   0   0     3     4
Fiat 128             32.4    4   78.7   66  4.08  2.200  19.47   1   1     4     1
Honda Civic          30.4    4   75.7   52  4.93  1.615  18.52   1   1     4     2
Toyota Corolla       33.9    4   71.1   65  4.22  1.835  19.90   1   1     4     1
Toyota Corona        21.5    4  120.1   97  3.70  2.465  20.01   1   0     3     1
Dodge Challenger     15.5    8  318.0  150  2.76  3.520  16.87   0   0     3     2
AMC Javelin          15.2    8  304.0  150  3.15  3.435  17.30   0   0     3     2
Camaro Z28           13.3    8  350.0  245  3.73  3.840  15.41   0   0     3     4
Pontiac Firebird     19.2    8  400.0  175  3.08  3.845  17.05   0   0     3     2
Fiat X1-9            27.3    4   79.0   66  4.08  1.935  18.90   1   1     4     1
Porsche 914-2        26.0    4  120.3   91  4.43  2.140  16.70   0   1     5     2
Lotus Europa         30.4    4   95.1  113  3.77  1.513  16.90   1   1     5     2
Ford Pantera L       15.8    8  351.0  264  4.22  3.170  14.50   0   1     5     4
Ferrari Dino         19.7    6  145.0  175  3.62  2.770  15.50   0   1     5     6
Maserati Bora        15.0    8  301.0  335  3.54  3.570  14.60   0   1     5     8
Volvo 142E           21.4    4  121.0  109  4.11  2.780  18.60   1   1     4     2
... ... >>> >>> >>> ... Text(0.5,1,'Hierarchical Clustering Dendrogram')
Text(0.5,-69.9778,'sample index')
Text(29.5972,0.5,'distance (Ward)')
{'icoord': [[25.0, 25.0, 35.0, 35.0], [15.0, 15.0, 30.0, 30.0], [5.0, 5.0, 22.5, 22.5], [95.0, 95.0, 105.0, 105.0], [85.0, 85.0, 100.0, 100.0], [75.0, 75.0, 92.5, 92.5], [65.0, 65.0, 83.75, 83.75], [55.0, 55.0, 74.375, 74.375], [45.0, 45.0, 64.6875, 64.6875], [125.0, 125.0, 135.0, 135.0], [145.0, 145.0, 155.0, 155.0], [130.0, 130.0, 150.0, 150.0], [115.0, 115.0, 140.0, 140.0], [54.84375, 54.84375, 127.5, 127.5], [13.75, 13.75, 91.171875, 91.171875], [165.0, 165.0, 175.0, 175.0], [195.0, 195.0, 205.0, 205.0], [185.0, 185.0, 200.0, 200.0], [215.0, 215.0, 225.0, 225.0], [192.5, 192.5, 220.0, 220.0], [170.0, 170.0, 206.25, 206.25], [255.0, 255.0, 265.0, 265.0], [245.0, 245.0, 260.0, 260.0], [235.0, 235.0, 252.5, 252.5], [285.0, 285.0, 295.0, 295.0], [275.0, 275.0, 290.0, 290.0], [305.0, 305.0, 315.0, 315.0], [282.5, 282.5, 310.0, 310.0], [243.75, 243.75, 296.25, 296.25], [188.125, 188.125, 270.0, 270.0], [52.4609375, 52.4609375, 229.0625, 229.0625]], 'dcoord': [[0.0, 5.147341546856977, 5.147341546856977, 0.0], [0.0, 10.201299345344859, 10.201299345344859, 5.147341546856977], [0.0, 16.89707975262787, 16.89707975262787, 10.201299345344859], [0.0, 8.65359029536296, 8.65359029536296, 0.0], [0.0, 14.21755048053871, 14.21755048053871, 8.65359029536296], [0.0, 19.89440928586052, 19.89440928586052, 14.21755048053871], [0.0, 30.38720376243924, 30.38720376243924, 19.89440928586052], [0.0, 41.765577612830086, 41.765577612830086, 30.38720376243924], [0.0, 62.39473420394506, 62.39473420394506, 41.765577612830086], [0.0, 0.6153251173160401, 0.6153251173160401, 0.0], [0.0, 1.5231546211727793, 1.5231546211727793, 0.0], [0.6153251173160401, 21.8609037438986, 21.8609037438986, 1.5231546211727793], [0.0, 77.831513556528, 77.831513556528, 21.8609037438986], [62.39473420394506, 124.42513884575622, 124.42513884575622, 77.831513556528], [16.89707975262787, 189.75327331432254, 189.75327331432254, 124.42513884575622], [0.0, 33.55086921377745, 33.55086921377745, 0.0], [0.0, 0.9826494797230624, 0.9826494797230624, 0.0], [0.0, 1.9956285559525688, 1.9956285559525688, 0.9826494797230624], [0.0, 14.015499455959462, 14.015499455959462, 0.0], [1.9956285559525688, 71.69000545171319, 71.69000545171319, 14.015499455959462], [33.55086921377745, 131.24667573749386, 131.24667573749386, 71.69000545171319], [0.0, 10.07612028510974, 10.07612028510974, 0.0], [0.0, 22.748314223256195, 22.748314223256195, 10.07612028510974], [0.0, 121.19933374404333, 121.19933374404333, 22.748314223256195], [0.0, 15.622444623041554, 15.622444623041554, 0.0], [0.0, 38.206294228394704, 38.206294228394704, 15.622444623041554], [0.0, 40.00524746830096, 40.00524746830096, 0.0], [38.206294228394704, 136.59795344708988, 136.59795344708988, 40.00524746830096], [121.19933374404333, 236.74277069464608, 236.74277069464608, 136.59795344708988], [131.24667573749386, 389.04227922692326, 389.04227922692326, 236.74277069464608], [189.75327331432254, 955.3712450494048, 955.3712450494048, 389.04227922692326]], 'ivl': ['Honda Civic', 'Toyota Corolla', 'Fiat 128', 'Fiat X1-9', 'Merc 240D', 'Lotus Europa', 'Merc 230', 'Volvo 142E', 'Datsun 710', 'Toyota Corona', 'Porsche 914-2', 'Ferrari Dino', 'Mazda RX4', 'Mazda RX4 Wag', 'Merc 280', 'Merc 280C', 'Hornet 4 Drive', 'Valiant', 'Merc 450SLC', 'Merc 450SE', 'Merc 450SL', 'Dodge Challenger', 'AMC Javelin', 'Maserati Bora', 'Ford Pantera L', 'Duster 360', 'Camaro Z28', 'Chrysler Imperial', 'Cadillac Fleetwood', 'Lincoln Continental', 'Hornet Sportabout', 'Pontiac Firebird'], 'leaves': [18, 19, 17, 25, 7, 27, 8, 31, 2, 20, 26, 29, 0, 1, 9, 10, 3, 5, 13, 11, 12, 21, 22, 30, 28, 6, 23, 16, 14, 15, 4, 24], 'color_list': ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'b']}
>>> ... 
[[./images/dendrogram.png]]
#+end_example

** Scatterplot(bi)

#+BEGIN_SRC sh
binisearch.py -o 'Scatterplot(bi)'
#+END_SRC


#+BEGIN_SRC python :session :results output :exports both
import matplotlib.pyplot as plt
plt.style.use('seaborn-whitegrid')
import numpy as np

x = np.linspace(0, 10, 30)
y = np.sin(x)

plt.plot(x, y, 'o', color='black');
display_inline('./images/scatterplot1.png')
#+END_SRC

#+RESULTS:
: 
: >>> >>> >>> >>> >>> >>> [<matplotlib.lines.Line2D object at 0x7f8ce43976a0>]
: [[./images/scatterplot1.png]]


#+BEGIN_SRC python :session :results output :exports both
import matplotlib.pyplot as plt
plt.style.use('seaborn-whitegrid')
import numpy as np

x = np.linspace(0, 10, 30)
y = np.sin(x)

plt.scatter(x, y, marker='o', color='black');
display_inline('./images/scatterplot2.png')
#+END_SRC

#+RESULTS:
: 
: >>> >>> >>> >>> >>> <matplotlib.collections.PathCollection object at 0x7f8ce4348ba8>
: [[./images/scatterplot2.png]]

** Heatmap
https://python-graph-gallery.com/heatmap/

#+BEGIN_SRC python :session :results output :exports both
import seaborn as sns
import pandas as pd
import numpy as np
 
# Create a dataset (fake)
df = pd.DataFrame(np.random.random((5,5)), columns=["a","b","c","d","e"])
 
# Default heatmap: just a visualization of this square matrix
p1 = sns.heatmap(df)
display_inline('./images/heatmap.png')
#+END_SRC

#+RESULTS:
: 
: >>> >>> ... ... >>> ... ... >>> 
: [[./images/heatmap.png]]

** Line charts(bi)

#+BEGIN_SRC sh
binisearch.py -o 'Line charts(bi)'
#+END_SRC


#+BEGIN_SRC python :session :results output :exports both
import matplotlib.pyplot as plt
plt.style.use('seaborn-whitegrid')
import numpy as np

x = np.linspace(0, 10, 30)
y = np.sin(x)

plt.plot(x, y, color='black');
#plt.show()
display_inline('./images/line_charts.png')

#+END_SRC

#+RESULTS:
: 
: >>> >>> >>> >>> >>> >>> [<matplotlib.lines.Line2D object at 0x7f520d461ac8>]
: ... 
: [[./images/line_charts.png]]


** Spatial charts

#+BEGIN_SRC sh
binisearch.py -o 'Spatial charts'
#+END_SRC

#+RESULTS:


** Survey plot
A survey plot is a simple multi-attribute visualization technique that can help to spot correlations between any two variables especially when the data is sorted according to a particular dimension. Each horizontal splice in a plot corresponds to a particular data instance. The data on a specific attribute is shown in a single column, where the length of the line corresponds to the dimensional value. When data includes a discrete or continuous class, the slices (data instances) are colored correspondingly.

Implementation in Orange supports sorting by two selected attributes (Sorting). The attributes shown in the plot are listed in Shown attributes box, all other appear in the list of Hidden attributes.

Below is a snapshot of survey plot widget for an Iris. Plot nicely shows that petal width and length and sepal length are correlated. It is also very clear that Iris-setosa can be classified based on petal length or width alone, while for the Iris versicolor and virginica there is some ambiguity with some potential outliers, one of which is highlighted in the snapshot.

https://docs.orange.biolab.si/2/widgets/rst/visualize/surveyplot.html

#+BEGIN_SRC sh
binisearch.py -o 'Survey plot visualization'
#+END_SRC

#+RESULTS:


** Timeline

#+BEGIN_SRC sh
binisearch.py -o 'Timeline'
#+END_SRC

#+RESULTS:

https://matplotlib.org/gallery/lines_bars_and_markers/timeline.html

#+BEGIN_SRC python :results output :tangle yes :tangle /tmp/timeline.py :exports both
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.dates as mdates
from datetime import datetime

# A list of Matplotlib releases and their dates
# Taken from https://api.github.com/repos/matplotlib/matplotlib/releases
names = ['v2.2.2', 'v2.2.1', 'v2.2.0', 'v2.1.2', 'v2.1.1', 'v2.1.0', 'v2.0.2',
         'v2.0.1', 'v2.0.0', 'v1.5.3', 'v1.5.2', 'v1.5.1', 'v1.5.0', 'v1.4.3',
         'v1.4.2', 'v1.4.1', 'v1.4.0']

dates = ['2018-03-17T03:00:07Z', '2018-03-16T22:06:39Z',
         '2018-03-06T12:53:32Z', '2018-01-18T04:56:47Z',
         '2017-12-10T04:47:38Z', '2017-10-07T22:35:12Z',
         '2017-05-10T02:11:15Z', '2017-05-02T01:59:49Z',
         '2017-01-17T02:59:36Z', '2016-09-09T03:00:52Z',
         '2016-07-03T15:52:01Z', '2016-01-10T22:38:50Z',
         '2015-10-29T21:40:23Z', '2015-02-16T04:22:54Z',
         '2014-10-26T03:24:13Z', '2014-10-18T18:56:23Z',
         '2014-08-26T21:06:04Z']
dates = [datetime.strptime(ii, "%Y-%m-%dT%H:%M:%SZ") for ii in dates]

levels = np.array([-5, 5, -3, 3, -1, 1])
fig, ax = plt.subplots(figsize=(8, 5))

# Create the base line
start = min(dates)
stop = max(dates)
ax.plot((start, stop), (0, 0), 'k', alpha=.5)

# Iterate through releases annotating each one
for ii, (iname, idate) in enumerate(zip(names, dates)):
    level = levels[ii % 6]
    vert = 'top' if level < 0 else 'bottom'

    ax.scatter(idate, 0, s=100, facecolor='w', edgecolor='k', zorder=9999)
    # Plot a line up to the text
    ax.plot((idate, idate), (0, level), c='r', alpha=.7)
    # Give the text a faint background and align it properly
    ax.text(idate, level, iname,
            horizontalalignment='right', verticalalignment=vert, fontsize=14,
            backgroundcolor=(1., 1., 1., .3))

ax.set(title="Matplotlib release dates")
# Set the xticks formatting
# format xaxis with 3 month intervals
ax.get_xaxis().set_major_locator(mdates.MonthLocator(interval=3))
ax.get_xaxis().set_major_formatter(mdates.DateFormatter("%b %Y"))
fig.autofmt_xdate()

# Remove components for a cleaner look
plt.setp((ax.get_yticklabels() + ax.get_yticklines() +
          list(ax.spines.values())), visible=False)
#plt.show()
def display_inline(filename):
    plt.savefig(filename)
    print()
    print('[[{}]]'.format(filename))

display_inline('./images/timeline.png')

#+END_SRC

#+RESULTS:
: 
: [[./images/timeline.png]]

** Barplot

https://python-graph-gallery.com/barplot/
https://python-graph-gallery.com/1-basic-barplot/

#+BEGIN_SRC python :session :results output :exports both
import numpy as np
import matplotlib.pyplot as plt

# Make a fake dataset:
height = [3, 12, 5, 18, 45]
bars = ('A', 'B', 'C', 'D', 'E')
y_pos = np.arange(len(bars))

# Create bars
plt.bar(y_pos, height)

# Create names on the x-axis
plt.xticks(y_pos, bars)

# Show graphic
#plt.show()
display_inline('./images/barplot.png')

#+END_SRC

#+RESULTS:
: 
: >>> >>> ... >>> >>> >>> >>> ... <BarContainer object of 5 artists>
: >>> ... ([<matplotlib.axis.XTick object at 0x7f520ce53e80>, <matplotlib.axis.XTick object at 0x7f520ce5b128>, <matplotlib.axis.XTick object at 0x7f520ce5b390>, <matplotlib.axis.XTick object at 0x7f520d3fd400>, <matplotlib.axis.XTick object at 0x7f520d074390>], <a list of 5 Text xticklabel objects>)
: >>> ... ... 
: [[./images/barplot.png]]

** Violinplot

https://python-graph-gallery.com/violin-plot/
https://python-graph-gallery.com/58-show-number-of-observation-on-violinplot/


#+BEGIN_SRC python :results output :exports both

# library & dataset
import matplotlib.pyplot as plt
import seaborn as sns, numpy as np
df = sns.load_dataset("iris")

# Basic violinplot
ax = sns.violinplot(x="species", y="sepal_length", data=df)

# Calculate number of obs per group & median to position labels
medians = df.groupby(['species'])['sepal_length'].median().values
nobs = df['species'].value_counts().values
nobs = [str(x) for x in nobs.tolist()]
nobs = ["n: " + i for i in nobs]

# Add it to the plot
pos = range(len(nobs))
for tick,label in zip(pos,ax.get_xticklabels()):
    ax.text(pos[tick], medians[tick] + 0.03, nobs[tick], horizontalalignment='center', size='x-small', color='w', weight='semibold')
#plt.show()

def display_inline(filename):
    plt.savefig(filename)
    print()
    print('[[{}]]'.format(filename))
display_inline('./images/violinplot.png')

#+END_SRC

#+RESULTS:
: 
: [[./images/violinplot.png]]

** pairplot
https://seaborn.pydata.org/generated/seaborn.pairplot.html


#+BEGIN_SRC python :results output :exports both
import matplotlib.pyplot as plt
import seaborn as sns; sns.set(style="ticks", color_codes=True)
iris = sns.load_dataset("iris")
g = sns.pairplot(iris)
#plt.show()

def display_inline(filename):
    plt.savefig(filename)
    print()
    print('[[{}]]'.format(filename))

display_inline('./images/pairplot.png')

#+END_SRC

#+RESULTS:
: 
: [[./images/pairplot.png]]

** lmplot
https://seaborn.pydata.org/generated/seaborn.lmplot.html
#+BEGIN_SRC python :results output :exports both
import matplotlib.pyplot as plt
import seaborn as sns; sns.set(color_codes=True)
tips = sns.load_dataset("tips")
g = sns.lmplot(x="total_bill", y="tip", data=tips)
filename = 'lmplot.png'
#plt.show()
def display_inline(filename):
    plt.savefig(filename)
    print()
    print('[[{}]]'.format(filename))
display_inline('./images/lmplot.png')

#+END_SRC

#+RESULTS:
: 
: [[./images/lmplot.png]]

** joinplot
https://seaborn.pydata.org/generated/seaborn.jointplot.html

#+BEGIN_SRC python :results output :exports both
import matplotlib.pyplot as plt
import seaborn as sns; sns.set(style="white", color_codes=True)
tips = sns.load_dataset("tips")
g = sns.jointplot(x="total_bill", y="tip", data=tips)
def display_inline(filename):
    plt.savefig(filename)
    print()
    print('[[{}]]'.format(filename))

display_inline('./images/joinplot.png')
#+END_SRC

#+RESULTS:
: 
: [[./images/joinplot.png]]

** Distributions
https://seaborn.pydata.org/tutorial/distributions.html

** Contour
https://www.python-course.eu/matplotlib_contour_plot.php

#+BEGIN_SRC python :results output :exports both
import matplotlib.pyplot as plt
import numpy as np

xlist = np.linspace(-3.0, 3.0, 3)
ylist = np.linspace(-3.0, 3.0, 4)
X, Y = np.meshgrid(xlist, ylist)
Z = np.sqrt(X*2 + Y**2)
print(X)
plt.figure()
cp = plt.contour(X, Y, Z)
plt.clabel(cp, inline=True, 
          fontsize=10)
plt.title('Contour Plot')
plt.xlabel('x (cm)')
plt.ylabel('y (cm)')
#plt.show()
def display_inline(filename):
    plt.savefig(filename)
    print()
    print('[[{}]]'.format(filename))

display_inline('./images/contour.png')

#+END_SRC

#+RESULTS:
: [[-3.  0.  3.]
:  [-3.  0.  3.]
:  [-3.  0.  3.]
:  [-3.  0.  3.]]
: 
: [[./images/contour.png]]

** What is mesh grid?
#+BEGIN_SRC python :results output
import numpy as np

xlist = np.arange(1, 7)
ylist = np.arange(1, 7)
X, Y = np.meshgrid(xlist, ylist)
print(xlist)
print(ylist)
print(X)
print(Y)
#+END_SRC

#+RESULTS:
#+begin_example
[1 2 3 4 5 6]
[1 2 3 4 5 6]
[[1 2 3 4 5 6]
 [1 2 3 4 5 6]
 [1 2 3 4 5 6]
 [1 2 3 4 5 6]
 [1 2 3 4 5 6]
 [1 2 3 4 5 6]]
[[1 1 1 1 1 1]
 [2 2 2 2 2 2]
 [3 3 3 3 3 3]
 [4 4 4 4 4 4]
 [5 5 5 5 5 5]
 [6 6 6 6 6 6]]
#+end_example

** Boxplot
http://python-graph-gallery.com/boxplot/
https://python-graph-gallery.com/30-basic-boxplot-with-seaborn/

*** 1 - One numerical variable only

 If you have only one numerical variable, you can use this code to get a boxplot with only one group (left chart).


#+BEGIN_SRC python :results output :exports both
# library & dataset
import matplotlib.pyplot as plt
import seaborn as sns
df = sns.load_dataset('iris')

# Make boxplot for one group only
sns.boxplot( y=df["sepal_length"] )
def display_inline(filename):
    plt.savefig(filename)
    print()
    print('[[{}]]'.format(filename))

display_inline('./images/boxplot1.png')


#+END_SRC

#+RESULTS:
: 
: [[./images/boxplot1.png]]

*** 2 - One numerical variable, and several groups

 Let’s say we want to study the distribution of a numerical variable, but for each group separately. Here we study
 the sepal length of 3 species of flower.

#+BEGIN_SRC python :results output :exports both

# library & dataset
import matplotlib.pyplot as plt
import seaborn as sns
df = sns.load_dataset('iris')

sns.boxplot(x=df["species"], y=df["sepal_length"])
def display_inline(filename):
    plt.savefig(filename)
    print()
    print('[[{}]]'.format(filename))

display_inline('./images/boxplot2.png')


#+END_SRC

#+RESULTS:
: 
: [[./images/boxplot2.png]]

*** 3 - Several numerical variable

 Finally we can study the distribution of several numerical variables, let’s say sepal length and width:

#+BEGIN_SRC python :results output :exports both

# library & dataset
import matplotlib.pyplot as plt
import seaborn as sns
df = sns.load_dataset('iris')

sns.boxplot(data=df.ix[:,0:3])
#plt.show()
def display_inline(filename):
    plt.savefig(filename)
    print()
    print('[[{}]]'.format(filename))

display_inline('./images/boxplot3.png')

#+END_SRC

#+RESULTS:
: 
: [[./images/boxplot3.png]]


** Decision Tree

#+BEGIN_SRC sh
binisearch.py -o 'Decision Tree'
#+END_SRC

#+RESULTS:

https://medium.com/@rnbrown/creating-and-visualizing-decision-trees-with-python-f8e8fa394176

#+BEGIN_SRC python :results output :exports both :tangle yes :tangle /tmp/decision.py
import sklearn.datasets as datasets
import pandas as pd
import matplotlib.pyplot as plt

iris=datasets.load_iris()
df=pd.DataFrame(iris.data, columns=iris.feature_names)
y=iris.target


from sklearn.tree import DecisionTreeClassifier
dtree=DecisionTreeClassifier()
dtree.fit(df,y)

from sklearn.externals.six import StringIO  
#from IPython.display import Image  
from sklearn.tree import export_graphviz
import pydotplus
dot_data = StringIO()
export_graphviz(dtree, out_file=dot_data,  
                filled=True, rounded=True,
                special_characters=True)
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
#Image(graph.create_png())
graph.create_png()
filename = './images/decision_tree.png'
graph.write_png(filename)

print('[[{}]]'.format(filename))

#+END_SRC

#+RESULTS:
: [[./images/decision_tree.png]]

** Animation using image magic

https://python-graph-gallery.com/341-python-gapminder-animation/

#+BEGIN_SRC python 

# libraries
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
sns.set_style("white")
import pandas as pd
my_dpi = 96

# Get the data (csv file is hosted on the web)
url = 'https://python-graph-gallery.com/wp-content/uploads/gapminderData.csv'
data = pd.read_csv(url)

# And I need to transform my categorical column (continent) in a numerical
# value group1->1, group2->2...
data['continent'] = pd.Categorical(data['continent'])

# For each year:
for i in data.year.unique():

    # initialize a figure
    fig = plt.figure(figsize=(680 / my_dpi, 480 / my_dpi), dpi=my_dpi)

    # Change color with c and alpha. I map the color to the X axis value.
    tmp = data[data.year == i]
    plt.scatter(tmp['lifeExp'], tmp['gdpPercap'], s=tmp['pop'] / 200000, c=tmp[
                'continent'].cat.codes, cmap="Accent", alpha=0.6, edgecolors="white", linewidth=2)

    # Add titles (main and on axis)
    plt.yscale('log')
    plt.xlabel("Life Expectancy")
    plt.ylabel("GDP per Capita")
    plt.title("Year: " + str(i))
    plt.ylim(0, 100000)
    plt.xlim(30, 90)

    # Save it
    filename = './images/Gapminder_step' + str(i) + '.png'
    plt.savefig(filename, dpi=96)
    plt.gca()

#+END_SRC

#+RESULTS:
: None

#+BEGIN_SRC sh :results output :exports both

# Then use image magick (this is bash, not python)
convert -delay 80 images/Gapminder*.png images/animated_gapminder.gif
echo "[[./images/animated_gapminder.gif]]"
#+END_SRC

#+RESULTS:
: [[./images/animated_gapminder.gif]]

** Wordcloud

https://python-graph-gallery.com/260-basic-wordcloud/

#+BEGIN_SRC python :results output :exports both
# Libraries
from wordcloud import WordCloud
import matplotlib.pyplot as plt

# Create a list of word
text=("Python Python Python Matplotlib Matplotlib Seaborn Network Plot Violin Chart Pandas Datascience Wordcloud Spider Radar Parrallel Alpha Color Brewer Density Scatter Barplot Barplot Boxplot Violinplot Treemap Stacked Area Chart Chart Visualization Dataviz Donut Pie Time-Series Wordcloud Wordcloud Sankey Bubble")

# Create the wordcloud object
wordcloud = WordCloud(width=480, height=480, margin=0).generate(text)

# Display the generated image:
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.margins(x=0, y=0)
#plt.show()

def display_inline(filename, plt):
    plt.savefig(filename)
    print()
    print('[[{}]]'.format(filename))

display_inline('./images/word_cloud.png', plt)


#+END_SRC

#+RESULTS:
: 
: [[./images/word_cloud.png]]

** Area plot

https://python-graph-gallery.com/pie-plot/

https://python-graph-gallery.com/140-basic-pieplot-with-panda/


#+BEGIN_SRC python :results output :exports both

# library
import matplotlib.pyplot as plt
import pandas as pd

# --- dataset 1: just 4 values for 4 groups:
df = pd.DataFrame([8,5,1,2], index=['a', 'b', 'c', 'd'], columns=['x'])

# make the plot
df.plot(kind='pie', subplots=True, figsize=(8, 8))
#plt.show()


def display_inline(filename, plt):
    plt.savefig(filename)
    print()
    print('[[{}]]'.format(filename))

display_inline('./images/area_plot.png', plt)


#+END_SRC

#+RESULTS:
: 
: [[./images/area_plot.png]]


** Stacked area plot

#+BEGIN_SRC python :results output
# library
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Dataset
np.random.seed(42)
df = pd.DataFrame(np.random.rand(10, 4), columns=['a', 'b', 'c', 'd'])
print(df)
# plot
df.plot.area()
#plt.show()

def display_inline(filename, plt):
    plt.savefig(filename)
    print()
    print('[[{}]]'.format(filename))

display_inline('./images/area_plot_stacked.png', plt)



#+END_SRC

#+RESULTS:
#+begin_example
          a         b         c         d
0  0.374540  0.950714  0.731994  0.598658
1  0.156019  0.155995  0.058084  0.866176
2  0.601115  0.708073  0.020584  0.969910
3  0.832443  0.212339  0.181825  0.183405
4  0.304242  0.524756  0.431945  0.291229
5  0.611853  0.139494  0.292145  0.366362
6  0.456070  0.785176  0.199674  0.514234
7  0.592415  0.046450  0.607545  0.170524
8  0.065052  0.948886  0.965632  0.808397
9  0.304614  0.097672  0.684233  0.440152

[[./images/area_plot_stacked.png]]
#+end_example

** D3.Js

#+BEGIN_SRC sh
binisearch.py -o 'D3.Js'
#+END_SRC


** Infovis

#+BEGIN_SRC sh
binisearch.py -o 'Infovis'
#+END_SRC


** IBM Many eyes

#+BEGIN_SRC sh
binisearch.py -o 'IBM Many eyes'
#+END_SRC


** Tableu

#+BEGIN_SRC sh
binisearch.py -o 'Tableu'
#+END_SRC



